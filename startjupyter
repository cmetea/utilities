ip=
port=
write_tunnel=false

OPTIND=
OPTARG=
opt=

while getopts "hp:w:" opt; do
    #echo "parsing arg $opt"
    
    case "$opt" in
        h)
            echo "\
            usage:
            ------
            startjupyter [ -h ] [ -p PORT ] [ -w FILE ]
            
            description:
            ------------
            Start Jupyter notebook. Checks if on a compute node. If
            not then exits with error (and message if -v).

            If on a compute node, selects IP address automatically and 
            checks to see if PORT is available. If not, exits with 
            error. If -p is not chosen, then finds a random unused 
            port and prints the tunnel command you would use.

            Can optionally write the tunnel command to FILE.

            optional arguments:
            -------------------
            -h          Print this help message and exit.
            -p PORT     Starting point to select open port.
            -w FILE     Write tunnel command to FILE.
            "
            exit 2
            ;;
        p)
            port="$OPTARG"
            ;;
        w)
            write_tunnel=true
            tunnel_file="$OPTARG"
            ;;
        ?)
            echo "Error: did not recognize option, ${OPTARG}."
            echo "Please try -h for help."
            exit 1
            ;;
    esac

done


### Check if on a compute node. The hostname should start with "exanode."
host=`hostname -s`
if grep -q "^exanode"<<<"$host"; then 
    :
else
    echo "You should only start Jupyter on a compute node,
`        `preferrably in an interactive session"
    exit 1
fi

  
### grep for specified port in list of used ports
if [[ $port ]] && netstat -lt  | grep $port &> /dev/null; then
    echo "port $port is already being used. Select another port
`        `or dont use -p flag"
    exit 1
elif [[ ! $port ]]; then
    ### selects a random unused port between 1025 and 65535
    ### from: https://unix.stackexchange.com/a/447763/151352
    port=` while port=$(shuf -n 1 -i 1025-65535); netstat -atun | grep -q "$port"; do continue; done; echo $port`
fi


### Check if conda is active. Execute `which conda` and check exit status.
if [[ `which conda &> /dev/null; echo $?` == 1 ]]; then
    echo "Conda not active. Sourcing initialization script"
    source /home/exacloud/lustre1/teamMicrobiome/conda/etc/profile.d/conda.sh
fi


### For now, always work from the base environment to guarantee that all features
### and extensions are installed (such as nb_conda).
echo "activating base environment"
conda activate base


### determine the ip address of the current node
host=$(hostname)
ip=$(host $host | cut -d" " -f4)


tunnel_command="ssh -L $port:$ip:$sport exacloud"
echo "tunnel command:"
echo $tunnal_command

if [[ $write_tunnel ]]; then
    echo "writing tunnel command to $tunnel_file"
    echo "ssh -L $port:$ip:$port exacloud" > $tunnel_file
fi


echo "starting jupyter with port $port on host $ip"


### Create and execute command
cmd="jupyter notebook --port=$port --ip=$ip --no-browser"
$cmd

exit 0
